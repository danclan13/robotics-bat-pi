{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0","program":"/home/dpop/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","max17320","--edition=2021","/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=19c1b2ba84ff9c3b","-C","extra-filename=-19c1b2ba84ff9c3b","--out-dir","/home/dpop/Documents/GitHub/robotics-bat-pi/bat_manger/target/rls/arm-unknown-linux-gnueabihf/debug/deps","--target","arm-unknown-linux-gnueabihf","-C","linker=arm-linux-gnueabihf-gcc","-L","dependency=/home/dpop/Documents/GitHub/robotics-bat-pi/bat_manger/target/rls/arm-unknown-linux-gnueabihf/debug/deps","-L","dependency=/home/dpop/Documents/GitHub/robotics-bat-pi/bat_manger/target/rls/debug/deps","--extern","embedded_hal=/home/dpop/Documents/GitHub/robotics-bat-pi/bat_manger/target/rls/arm-unknown-linux-gnueabihf/debug/deps/libembedded_hal-ac68b8077cc7dd81.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/dpop/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dpop/Documents/GitHub/robotics-bat-pi/bat_manger/target/rls/arm-unknown-linux-gnueabihf/debug/deps/libmax17320-19c1b2ba84ff9c3b.rmeta"},"prelude":{"crate_id":{"name":"max17320","disambiguator":[15281994443112639018,0]},"crate_root":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src","external_crates":[{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[17930309289214527112,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[14518270914441242570,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[2056816703833760926,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","num":4,"id":{"name":"embedded_hal","disambiguator":[8670947464361575173,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","num":5,"id":{"name":"nb","disambiguator":[16218477894260498449,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","num":6,"id":{"name":"nb","disambiguator":[8573900413262374328,0]}},{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","num":7,"id":{"name":"void","disambiguator":[2999953337472354034,0]}}],"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":0,"byte_end":18054,"line_start":1,"line_end":507,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":3209,"byte_end":3210,"line_start":90,"line_end":90,"column_start":17,"column_end":18},"alias_span":null,"name":"*","value":"AlwaysOnRegulatorConfiguration, BatteryPackUpdate, ThermistorType, ChargePumpVoltageConfiguration","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":0,"byte_end":18054,"line_start":1,"line_end":507,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":12},{"krate":0,"index":29},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":289},{"krate":0,"index":292},{"krate":0,"index":295},{"krate":0,"index":298},{"krate":0,"index":472},{"krate":0,"index":478},{"krate":0,"index":481},{"krate":0,"index":484},{"krate":0,"index":299},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345}],"decl_id":null,"docs":" An embedded hal driver for the MAX17320 (2S-4S ModelGauge m5 Fuel Gauge with Protector, Internal Self-Discharge Detection and SHA-256 Authentication)\n ## Examples","sig":null,"attributes":[{"value":"/ An embedded hal driver for the MAX17320 (2S-4S ModelGauge m5 Fuel Gauge with Protector, Internal Self-Discharge Detection and SHA-256 Authentication)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":0,"byte_end":153,"line_start":1,"line_end":1,"column_start":1,"column_end":154}},{"value":"/ ## Examples","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":154,"byte_end":169,"line_start":2,"line_end":2,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":170,"byte_end":173,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ for more examples please see [max17320_stm32f401_examples](https://github.com/shaoyuancc/max17320_stm32f401_examples)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":174,"byte_end":295,"line_start":4,"line_end":4,"column_start":1,"column_end":122}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":296,"byte_end":299,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":300,"byte_end":311,"line_start":6,"line_end":6,"column_start":1,"column_end":12}},{"value":"/ #![no_std]","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":312,"byte_end":326,"line_start":7,"line_end":7,"column_start":1,"column_end":15}},{"value":"/ #![no_main]","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":327,"byte_end":342,"line_start":8,"line_end":8,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":343,"byte_end":346,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ use cortex_m_rt::ExceptionFrame;","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":347,"byte_end":383,"line_start":10,"line_end":10,"column_start":1,"column_end":37}},{"value":"/ use cortex_m_rt::{entry, exception};","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":384,"byte_end":424,"line_start":11,"line_end":11,"column_start":1,"column_end":41}},{"value":"/ use cortex_m_semihosting::hprintln;","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":425,"byte_end":464,"line_start":12,"line_end":12,"column_start":1,"column_end":40}},{"value":"/ use hal::{pac, prelude::*};","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":465,"byte_end":496,"line_start":13,"line_end":13,"column_start":1,"column_end":32}},{"value":"/ use panic_semihosting as _;","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":497,"byte_end":528,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/ use stm32f4xx_hal as hal;","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":529,"byte_end":558,"line_start":15,"line_end":15,"column_start":1,"column_end":30}},{"value":"/ use vl6180x;","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":559,"byte_end":575,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":576,"byte_end":579,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ #[entry]","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":580,"byte_end":592,"line_start":18,"line_end":18,"column_start":1,"column_end":13}},{"value":"/ fn main() -> ! {","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":593,"byte_end":613,"line_start":19,"line_end":19,"column_start":1,"column_end":21}},{"value":"/     if let (Some(dp), Some(_cp)) = (","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":614,"byte_end":654,"line_start":20,"line_end":20,"column_start":1,"column_end":41}},{"value":"/         pac::Peripherals::take(),","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":655,"byte_end":692,"line_start":21,"line_end":21,"column_start":1,"column_end":38}},{"value":"/         cortex_m::peripheral::Peripherals::take(),","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":693,"byte_end":747,"line_start":22,"line_end":22,"column_start":1,"column_end":55}},{"value":"/     ) {","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":748,"byte_end":759,"line_start":23,"line_end":23,"column_start":1,"column_end":12}},{"value":"/         let rcc = dp.RCC.constrain();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":760,"byte_end":801,"line_start":24,"line_end":24,"column_start":1,"column_end":42}},{"value":"/         let clocks = rcc.cfgr.sysclk(48.MHz()).freeze();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":802,"byte_end":862,"line_start":25,"line_end":25,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":863,"byte_end":866,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/         let gpiob = dp.GPIOB.split();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":867,"byte_end":908,"line_start":27,"line_end":27,"column_start":1,"column_end":42}},{"value":"/         let scl = gpiob","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":909,"byte_end":936,"line_start":28,"line_end":28,"column_start":1,"column_end":28}},{"value":"/             .pb8","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":937,"byte_end":957,"line_start":29,"line_end":29,"column_start":1,"column_end":21}},{"value":"/             .into_alternate()","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":958,"byte_end":991,"line_start":30,"line_end":30,"column_start":1,"column_end":34}},{"value":"/             .internal_pull_up(true)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":992,"byte_end":1031,"line_start":31,"line_end":31,"column_start":1,"column_end":40}},{"value":"/             .set_open_drain();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":1032,"byte_end":1066,"line_start":32,"line_end":32,"column_start":1,"column_end":35}},{"value":"/         let sda = gpiob","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":1067,"byte_end":1094,"line_start":33,"line_end":33,"column_start":1,"column_end":28}},{"value":"/             .pb9","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":1095,"byte_end":1115,"line_start":34,"line_end":34,"column_start":1,"column_end":21}},{"value":"/             .into_alternate()","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":1116,"byte_end":1149,"line_start":35,"line_end":35,"column_start":1,"column_end":34}},{"value":"/             .internal_pull_up(true)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":1150,"byte_end":1189,"line_start":36,"line_end":36,"column_start":1,"column_end":40}},{"value":"/             .set_open_drain();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":1190,"byte_end":1224,"line_start":37,"line_end":37,"column_start":1,"column_end":35}},{"value":"/         let i2c = dp.I2C1.i2c((scl, sda), 400.kHz(), &clocks);","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":1225,"byte_end":1291,"line_start":38,"line_end":38,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":1292,"byte_end":1295,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/         let mut bat = max17320::MAX17320::new(i2c, 5.0).expect(\"mx\");","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":1296,"byte_end":1369,"line_start":40,"line_end":40,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":1370,"byte_end":1373,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/         hprintln!(\"status: {}\", bat.read_status().unwrap()).unwrap();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":1374,"byte_end":1447,"line_start":42,"line_end":42,"column_start":1,"column_end":74}},{"value":"/         hprintln!(\"capacity: {}mAh\", bat.read_capacity().unwrap()).unwrap();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":1448,"byte_end":1528,"line_start":43,"line_end":43,"column_start":1,"column_end":81}},{"value":"/         hprintln!(\"device name: {}\", bat.read_device_name().unwrap()).unwrap();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":1529,"byte_end":1612,"line_start":44,"line_end":44,"column_start":1,"column_end":84}},{"value":"/         hprintln!(\"state of charge: {}%\", bat.read_state_of_charge().unwrap()).unwrap();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":1613,"byte_end":1705,"line_start":45,"line_end":45,"column_start":1,"column_end":93}},{"value":"/         hprintln!(\"vcell: {}v\", bat.read_vcell().unwrap()).unwrap();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":1706,"byte_end":1778,"line_start":46,"line_end":46,"column_start":1,"column_end":73}},{"value":"/         hprintln!(\"cell1: {}v\", bat.read_cell1().unwrap()).unwrap();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":1779,"byte_end":1851,"line_start":47,"line_end":47,"column_start":1,"column_end":73}},{"value":"/         hprintln!(\"temp: {}°C\", bat.read_temperature().unwrap()).unwrap();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":1852,"byte_end":1931,"line_start":48,"line_end":48,"column_start":1,"column_end":79}},{"value":"/         hprintln!(\"die temp: {}°C\", bat.read_die_temperature().unwrap()).unwrap();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":1932,"byte_end":2019,"line_start":49,"line_end":49,"column_start":1,"column_end":87}},{"value":"/         hprintln!(\"current: {}mA\", bat.read_current().unwrap()).unwrap();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2020,"byte_end":2097,"line_start":50,"line_end":50,"column_start":1,"column_end":78}},{"value":"/         hprintln!(\"tte: {}\", bat.read_time_to_empty().unwrap()).unwrap();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2098,"byte_end":2175,"line_start":51,"line_end":51,"column_start":1,"column_end":78}},{"value":"/         hprintln!(\"ttf: {}\", bat.read_time_to_full().unwrap()).unwrap();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2176,"byte_end":2252,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/         hprintln!(\"prot_status: {}\", bat.read_protection_status().unwrap()).unwrap();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2253,"byte_end":2342,"line_start":53,"line_end":53,"column_start":1,"column_end":90}},{"value":"/         hprintln!(\"prot_alert: {}\", bat.read_protection_alert().unwrap()).unwrap();","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2343,"byte_end":2430,"line_start":54,"line_end":54,"column_start":1,"column_end":88}},{"value":"/     }","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2431,"byte_end":2440,"line_start":55,"line_end":55,"column_start":1,"column_end":10}},{"value":"/     loop {}","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2441,"byte_end":2456,"line_start":56,"line_end":56,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2457,"byte_end":2462,"line_start":57,"line_end":57,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2463,"byte_end":2466,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ #[exception]","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2467,"byte_end":2483,"line_start":59,"line_end":59,"column_start":1,"column_end":17}},{"value":"/ unsafe fn HardFault(ef: &ExceptionFrame) -> ! {","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2484,"byte_end":2535,"line_start":60,"line_end":60,"column_start":1,"column_end":52}},{"value":"/     panic!(\"{:#?}\", ef);","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2536,"byte_end":2564,"line_start":61,"line_end":61,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2565,"byte_end":2570,"line_start":62,"line_end":62,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2571,"byte_end":2578,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/ ## References","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2580,"byte_end":2597,"line_start":65,"line_end":65,"column_start":1,"column_end":18}},{"value":"/ [MAX17320 datasheet](https://datasheets.maximintegrated.com/en/ds/MAX17320.pdf)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2598,"byte_end":2681,"line_start":66,"line_end":66,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2682,"byte_end":2685,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ## Additional Notes","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2686,"byte_end":2709,"line_start":68,"line_end":68,"column_start":1,"column_end":24}},{"value":"/ - Only tested with STM32F401 microcontroller","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2710,"byte_end":2758,"line_start":69,"line_end":69,"column_start":1,"column_end":49}},{"value":"/ - 1-Wire communication protocol not implemented yet. Drop me an email or submit a pull request to add support.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2759,"byte_end":2873,"line_start":70,"line_end":70,"column_start":1,"column_end":115}},{"value":"no_std","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2898,"byte_end":2904,"line_start":72,"line_end":72,"column_start":24,"column_end":30}},{"value":"deny(missing_docs, missing_debug_implementations,\n       missing_copy_implementations, trivial_casts, unstable_features,\n       unused_import_braces, unused_qualifications, warnings)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":2907,"byte_end":3113,"line_start":73,"line_end":82,"column_start":1,"column_end":3}},{"value":"allow(dead_code)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":3114,"byte_end":3134,"line_start":83,"line_end":83,"column_start":1,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":347},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18179,"byte_end":18188,"line_start":5,"line_end":5,"column_start":5,"column_end":14},"name":"Ntc10KOhm","qualname":"::config::ThermistorType::Ntc10KOhm","value":"ThermistorType::Ntc10KOhm","parent":{"krate":0,"index":346},"children":[],"decl_id":null,"docs":" 10kΩ NTC thermistor\n","sig":null,"attributes":[{"value":"/ 10kΩ NTC thermistor","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18150,"byte_end":18174,"line_start":4,"line_end":4,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":350},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18228,"byte_end":18238,"line_start":7,"line_end":7,"column_start":5,"column_end":15},"name":"Ntc100KOhm","qualname":"::config::ThermistorType::Ntc100KOhm","value":"ThermistorType::Ntc100KOhm","parent":{"krate":0,"index":346},"children":[],"decl_id":null,"docs":" 100kΩ NTC thermistor\n","sig":null,"attributes":[{"value":"/ 100kΩ NTC thermistor","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18198,"byte_end":18223,"line_start":6,"line_end":6,"column_start":5,"column_end":29}}]},{"kind":"Enum","id":{"krate":0,"index":346},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18129,"byte_end":18143,"line_start":3,"line_end":3,"column_start":10,"column_end":24},"name":"ThermistorType","qualname":"::config::ThermistorType","value":"pub enum ThermistorType { Ntc10KOhm = , Ntc100KOhm = , }","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":350}],"decl_id":null,"docs":" Type of thermistor\n","sig":null,"attributes":[{"value":"/ Type of thermistor","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18056,"byte_end":18078,"line_start":1,"line_end":1,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":362},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18507,"byte_end":18511,"line_start":16,"line_end":16,"column_start":5,"column_end":9},"name":"Cp6V","qualname":"::config::ChargePumpVoltageConfiguration::Cp6V","value":"ChargePumpVoltageConfiguration::Cp6V","parent":{"krate":0,"index":361},"children":[],"decl_id":null,"docs":" 6V setting\n","sig":null,"attributes":[{"value":"/ 6V setting","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18488,"byte_end":18502,"line_start":15,"line_end":15,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":365},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18540,"byte_end":18544,"line_start":18,"line_end":18,"column_start":5,"column_end":9},"name":"Cp8V","qualname":"::config::ChargePumpVoltageConfiguration::Cp8V","value":"ChargePumpVoltageConfiguration::Cp8V","parent":{"krate":0,"index":361},"children":[],"decl_id":null,"docs":" 8V setting\n","sig":null,"attributes":[{"value":"/ 8V setting","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18521,"byte_end":18535,"line_start":17,"line_end":17,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":368},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18579,"byte_end":18584,"line_start":20,"line_end":20,"column_start":5,"column_end":10},"name":"Cp10V","qualname":"::config::ChargePumpVoltageConfiguration::Cp10V","value":"ChargePumpVoltageConfiguration::Cp10V","parent":{"krate":0,"index":361},"children":[],"decl_id":null,"docs":" 10V setting\n","sig":null,"attributes":[{"value":"/ 10V setting","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18559,"byte_end":18574,"line_start":19,"line_end":19,"column_start":5,"column_end":20}}]},{"kind":"Enum","id":{"krate":0,"index":361},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18451,"byte_end":18481,"line_start":14,"line_end":14,"column_start":10,"column_end":40},"name":"ChargePumpVoltageConfiguration","qualname":"::config::ChargePumpVoltageConfiguration","value":"pub enum ChargePumpVoltageConfiguration { Cp6V = , Cp8V = , Cp10V = , }","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":365},{"krate":0,"index":368}],"decl_id":null,"docs":" Charge Pump Voltage Configuration.\n Set according to the desired gate drive. Note that there is a trade-off in\n quiescent vs. gate-drive.\n","sig":null,"attributes":[{"value":"/ Charge Pump Voltage Configuration.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18253,"byte_end":18291,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"/ Set according to the desired gate drive. Note that there is a trade-off in","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18292,"byte_end":18370,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ quiescent vs. gate-drive.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18371,"byte_end":18400,"line_start":12,"line_end":12,"column_start":1,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":380},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18750,"byte_end":18758,"line_start":27,"line_end":27,"column_start":5,"column_end":13},"name":"Disabled","qualname":"::config::AlwaysOnRegulatorConfiguration::Disabled","value":"AlwaysOnRegulatorConfiguration::Disabled","parent":{"krate":0,"index":379},"children":[],"decl_id":null,"docs":" ALDO is disabled.\n","sig":null,"attributes":[{"value":"/ ALDO is disabled.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18724,"byte_end":18745,"line_start":26,"line_end":26,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":383},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18809,"byte_end":18820,"line_start":29,"line_end":29,"column_start":5,"column_end":16},"name":"Enabled3p4V","qualname":"::config::AlwaysOnRegulatorConfiguration::Enabled3p4V","value":"AlwaysOnRegulatorConfiguration::Enabled3p4V","parent":{"krate":0,"index":379},"children":[],"decl_id":null,"docs":" ALDO is enabled. Output is 3.4V.\n","sig":null,"attributes":[{"value":"/ ALDO is enabled. Output is 3.4V.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18768,"byte_end":18804,"line_start":28,"line_end":28,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":386},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18876,"byte_end":18887,"line_start":31,"line_end":31,"column_start":5,"column_end":16},"name":"Enabled1p8V","qualname":"::config::AlwaysOnRegulatorConfiguration::Enabled1p8V","value":"AlwaysOnRegulatorConfiguration::Enabled1p8V","parent":{"krate":0,"index":379},"children":[],"decl_id":null,"docs":" ALDO is enabled Output is 1.8V.\n","sig":null,"attributes":[{"value":"/ ALDO is enabled Output is 1.8V.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18836,"byte_end":18871,"line_start":30,"line_end":30,"column_start":5,"column_end":40}}]},{"kind":"Enum","id":{"krate":0,"index":379},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18687,"byte_end":18717,"line_start":25,"line_end":25,"column_start":10,"column_end":40},"name":"AlwaysOnRegulatorConfiguration","qualname":"::config::AlwaysOnRegulatorConfiguration","value":"pub enum AlwaysOnRegulatorConfiguration {\n    Disabled = ,\n    Enabled3p4V = ,\n    Enabled1p8V = ,\n}","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":383},{"krate":0,"index":386}],"decl_id":null,"docs":" Always-on Regulator Configuration.\n","sig":null,"attributes":[{"value":"/ Always-on Regulator Configuration.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18598,"byte_end":18636,"line_start":23,"line_end":23,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":398},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":19064,"byte_end":19080,"line_start":38,"line_end":38,"column_start":5,"column_end":21},"name":"UpdateEvery22p4s","qualname":"::config::BatteryPackUpdate::UpdateEvery22p4s","value":"BatteryPackUpdate::UpdateEvery22p4s","parent":{"krate":0,"index":397},"children":[],"decl_id":null,"docs":" Pckp/Batt channels update every 22.4s\n","sig":null,"attributes":[{"value":"/ Pckp/Batt channels update every 22.4s","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":19018,"byte_end":19059,"line_start":37,"line_end":37,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":401},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":19166,"byte_end":19192,"line_start":40,"line_end":40,"column_start":5,"column_end":31},"name":"AfterMeasurementsCompleted","qualname":"::config::BatteryPackUpdate::AfterMeasurementsCompleted","value":"BatteryPackUpdate::AfterMeasurementsCompleted","parent":{"krate":0,"index":397},"children":[],"decl_id":null,"docs":" Pckp/Batt channels update after all cell measurements are completed\n","sig":null,"attributes":[{"value":"/ Pckp/Batt channels update after all cell measurements are completed","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":19090,"byte_end":19161,"line_start":39,"line_end":39,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":397},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18994,"byte_end":19011,"line_start":36,"line_end":36,"column_start":10,"column_end":27},"name":"BatteryPackUpdate","qualname":"::config::BatteryPackUpdate","value":"pub enum BatteryPackUpdate {\n    UpdateEvery22p4s = ,\n    AfterMeasurementsCompleted = ,\n}","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":401}],"decl_id":null,"docs":" Enable Pckp and Batt Channels update.\n","sig":null,"attributes":[{"value":"/ Enable Pckp and Batt Channels update.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/config.rs","byte_start":18902,"byte_end":18943,"line_start":34,"line_end":34,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":414},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/error.rs","byte_start":19378,"byte_end":19391,"line_start":7,"line_end":7,"column_start":5,"column_end":18},"name":"InvalidDevice","qualname":"::error::Error::InvalidDevice","value":"Error::InvalidDevice(u8)","parent":{"krate":0,"index":412},"children":[],"decl_id":null,"docs":" WHO_AM_I returned invalid value (returned value is argument).\n","sig":null,"attributes":[{"value":"/ WHO_AM_I returned invalid value (returned value is argument).","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/error.rs","byte_start":19308,"byte_end":19373,"line_start":6,"line_end":6,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":417},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/error.rs","byte_start":19431,"byte_end":19439,"line_start":9,"line_end":9,"column_start":5,"column_end":13},"name":"BusError","qualname":"::error::Error::BusError","value":"Error::BusError(E)","parent":{"krate":0,"index":412},"children":[],"decl_id":null,"docs":" Underlying bus error.\n","sig":null,"attributes":[{"value":"/ Underlying bus error.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/error.rs","byte_start":19401,"byte_end":19426,"line_start":8,"line_end":8,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":420},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/error.rs","byte_start":19464,"byte_end":19471,"line_start":11,"line_end":11,"column_start":5,"column_end":12},"name":"Timeout","qualname":"::error::Error::Timeout","value":"Error::Timeout","parent":{"krate":0,"index":412},"children":[],"decl_id":null,"docs":" Timeout\n","sig":null,"attributes":[{"value":"/ Timeout","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/error.rs","byte_start":19448,"byte_end":19459,"line_start":10,"line_end":10,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":422},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/error.rs","byte_start":19504,"byte_end":19520,"line_start":13,"line_end":13,"column_start":5,"column_end":21},"name":"NonvolatileError","qualname":"::error::Error::NonvolatileError","value":"Error::NonvolatileError(register::RegisterNvm)","parent":{"krate":0,"index":412},"children":[],"decl_id":null,"docs":" Nonvolatile Error.\n","sig":null,"attributes":[{"value":"/ Nonvolatile Error.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/error.rs","byte_start":19477,"byte_end":19499,"line_start":12,"line_end":12,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":425},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/error.rs","byte_start":19586,"byte_end":19611,"line_start":15,"line_end":15,"column_start":5,"column_end":30},"name":"InvalidConfigurationValue","qualname":"::error::Error::InvalidConfigurationValue","value":"Error::InvalidConfigurationValue(u16)","parent":{"krate":0,"index":412},"children":[],"decl_id":null,"docs":" Invalid configuration value.\n","sig":null,"attributes":[{"value":"/ Invalid configuration value.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/error.rs","byte_start":19549,"byte_end":19581,"line_start":14,"line_end":14,"column_start":5,"column_end":37}}]},{"kind":"Enum","id":{"krate":0,"index":412},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/error.rs","byte_start":19293,"byte_end":19298,"line_start":5,"line_end":5,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"pub enum Error<E> {\n    InvalidDevice(u8),\n    BusError(E),\n    Timeout,\n    NonvolatileError(register::RegisterNvm),\n    InvalidConfigurationValue(u16),\n}","parent":null,"children":[{"krate":0,"index":414},{"krate":0,"index":417},{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":425}],"decl_id":null,"docs":" MPU Error\n","sig":null,"attributes":[{"value":"/ MPU Error","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/error.rs","byte_start":19229,"byte_end":19242,"line_start":3,"line_end":3,"column_start":1,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":443},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/register.rs","byte_start":22302,"byte_end":22313,"line_start":35,"line_end":35,"column_start":5,"column_end":16},"name":"NBattStatus","qualname":"::register::RegisterNvm::NBattStatus","value":"RegisterNvm::NBattStatus","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":446},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/register.rs","byte_start":22326,"byte_end":22334,"line_start":36,"line_end":36,"column_start":5,"column_end":13},"name":"NPackCfg","qualname":"::register::RegisterNvm::NPackCfg","value":"RegisterNvm::NPackCfg","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":449},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/register.rs","byte_start":22347,"byte_end":22354,"line_start":37,"line_end":37,"column_start":5,"column_end":12},"name":"NConfig","qualname":"::register::RegisterNvm::NConfig","value":"RegisterNvm::NConfig","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":452},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/register.rs","byte_start":22367,"byte_end":22375,"line_start":38,"line_end":38,"column_start":5,"column_end":13},"name":"NVAlrtTh","qualname":"::register::RegisterNvm::NVAlrtTh","value":"RegisterNvm::NVAlrtTh","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":455},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/register.rs","byte_start":22388,"byte_end":22396,"line_start":39,"line_end":39,"column_start":5,"column_end":13},"name":"NTAlrtTh","qualname":"::register::RegisterNvm::NTAlrtTh","value":"RegisterNvm::NTAlrtTh","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":458},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/register.rs","byte_start":22409,"byte_end":22417,"line_start":40,"line_end":40,"column_start":5,"column_end":13},"name":"NSAlrtTh","qualname":"::register::RegisterNvm::NSAlrtTh","value":"RegisterNvm::NSAlrtTh","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":461},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/register.rs","byte_start":22430,"byte_end":22438,"line_start":41,"line_end":41,"column_start":5,"column_end":13},"name":"NIAlrtTh","qualname":"::register::RegisterNvm::NIAlrtTh","value":"RegisterNvm::NIAlrtTh","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":442},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/register.rs","byte_start":22284,"byte_end":22295,"line_start":34,"line_end":34,"column_start":10,"column_end":21},"name":"RegisterNvm","qualname":"::register::RegisterNvm","value":"pub enum RegisterNvm {\n    NBattStatus = ,\n    NPackCfg = ,\n    NConfig = ,\n    NVAlrtTh = ,\n    NTAlrtTh = ,\n    NSAlrtTh = ,\n    NIAlrtTh = ,\n}","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":446},{"krate":0,"index":449},{"krate":0,"index":452},{"krate":0,"index":455},{"krate":0,"index":458},{"krate":0,"index":461}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":472},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":3371,"byte_end":3379,"line_start":97,"line_end":97,"column_start":12,"column_end":20},"name":"MAX17320","qualname":"::MAX17320","value":"MAX17320 {  }","parent":null,"children":[{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477}],"decl_id":null,"docs":" MAX17320 interface\n","sig":null,"attributes":[{"value":"/ MAX17320 interface","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":3307,"byte_end":3329,"line_start":95,"line_end":95,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":3649,"byte_end":3652,"line_start":109,"line_end":109,"column_start":12,"column_end":15},"name":"new","qualname":"<MAX17320<I2C>>::new","value":"pub fn new(I2C, f32) -> Result<Self, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Create new driver interface. r_sense is in mΩ.\n","sig":null,"attributes":[{"value":"/ Create new driver interface. r_sense is in mΩ.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":3586,"byte_end":3637,"line_start":108,"line_end":108,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":3874,"byte_end":3888,"line_start":114,"line_end":114,"column_start":12,"column_end":26},"name":"with_addresses","qualname":"<MAX17320<I2C>>::with_addresses","value":"pub fn with_addresses(I2C, u8, u8, f32) -> Result<Self, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Create new driver interface with specific I2C address. r_sense is in mΩ.\n","sig":null,"attributes":[{"value":"/ Create new driver interface with specific I2C address. r_sense is in mΩ.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":3785,"byte_end":3862,"line_start":113,"line_end":113,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":4219,"byte_end":4235,"line_start":130,"line_end":130,"column_start":12,"column_end":28},"name":"read_device_name","qualname":"<MAX17320<I2C>>::read_device_name","value":"pub fn read_device_name(&mut Self) -> Result<u16, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Read the device name\n","sig":null,"attributes":[{"value":"/ Read the device name","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":4183,"byte_end":4207,"line_start":129,"line_end":129,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":4416,"byte_end":4427,"line_start":136,"line_end":136,"column_start":12,"column_end":23},"name":"read_status","qualname":"<MAX17320<I2C>>::read_status","value":"pub fn read_status(&mut Self) -> Result<u16, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Read alert status and chip status\n","sig":null,"attributes":[{"value":"/ Read alert status and chip status","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":4367,"byte_end":4404,"line_start":135,"line_end":135,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":4610,"byte_end":4623,"line_start":142,"line_end":142,"column_start":12,"column_end":25},"name":"read_capacity","qualname":"<MAX17320<I2C>>::read_capacity","value":"pub fn read_capacity(&mut Self) -> Result<f32, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Read reported remaining capacity (mAh)\n","sig":null,"attributes":[{"value":"/ Read reported remaining capacity (mAh)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":4556,"byte_end":4598,"line_start":141,"line_end":141,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":4836,"byte_end":4856,"line_start":148,"line_end":148,"column_start":12,"column_end":32},"name":"read_state_of_charge","qualname":"<MAX17320<I2C>>::read_state_of_charge","value":"pub fn read_state_of_charge(&mut Self) -> Result<f32, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Read reported state of charge (%)\n","sig":null,"attributes":[{"value":"/ Read reported state of charge (%)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":4787,"byte_end":4824,"line_start":147,"line_end":147,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":5067,"byte_end":5077,"line_start":154,"line_end":154,"column_start":12,"column_end":22},"name":"read_vcell","qualname":"<MAX17320<I2C>>::read_vcell","value":"pub fn read_vcell(&mut Self) -> Result<f32, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Read the cell voltage for a single cell (v)\n","sig":null,"attributes":[{"value":"/ Read the cell voltage for a single cell (v)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":5008,"byte_end":5055,"line_start":153,"line_end":153,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":5263,"byte_end":5279,"line_start":160,"line_end":160,"column_start":12,"column_end":28},"name":"read_temperature","qualname":"<MAX17320<I2C>>::read_temperature","value":"pub fn read_temperature(&mut Self) -> Result<f32, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Read temperature (°C)\n","sig":null,"attributes":[{"value":"/ Read temperature (°C)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":5225,"byte_end":5251,"line_start":159,"line_end":159,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":5488,"byte_end":5508,"line_start":166,"line_end":166,"column_start":12,"column_end":32},"name":"read_die_temperature","qualname":"<MAX17320<I2C>>::read_die_temperature","value":"pub fn read_die_temperature(&mut Self) -> Result<f32, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Read internal die temperature (°C)\n","sig":null,"attributes":[{"value":"/ Read internal die temperature (°C)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":5437,"byte_end":5476,"line_start":165,"line_end":165,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":5709,"byte_end":5721,"line_start":172,"line_end":172,"column_start":12,"column_end":24},"name":"read_current","qualname":"<MAX17320<I2C>>::read_current","value":"pub fn read_current(&mut Self) -> Result<f32, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Read battery current (A)\n","sig":null,"attributes":[{"value":"/ Read battery current (A)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":5669,"byte_end":5697,"line_start":171,"line_end":171,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":5936,"byte_end":5954,"line_start":178,"line_end":178,"column_start":12,"column_end":30},"name":"read_time_to_empty","qualname":"<MAX17320<I2C>>::read_time_to_empty","value":"pub fn read_time_to_empty(&mut Self) -> Result<f32, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Read time to empty (seconds)\n","sig":null,"attributes":[{"value":"/ Read time to empty (seconds)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":5892,"byte_end":5924,"line_start":177,"line_end":177,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":6148,"byte_end":6165,"line_start":184,"line_end":184,"column_start":12,"column_end":29},"name":"read_time_to_full","qualname":"<MAX17320<I2C>>::read_time_to_full","value":"pub fn read_time_to_full(&mut Self) -> Result<f32, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Read time to full (seconds)\n","sig":null,"attributes":[{"value":"/ Read time to full (seconds)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":6105,"byte_end":6136,"line_start":183,"line_end":183,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":6380,"byte_end":6402,"line_start":190,"line_end":190,"column_start":12,"column_end":34},"name":"read_protection_status","qualname":"<MAX17320<I2C>>::read_protection_status","value":"pub fn read_protection_status(&mut Self) -> Result<u16, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Read fault status of the protection functionality\n","sig":null,"attributes":[{"value":"/ Read fault status of the protection functionality","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":6315,"byte_end":6368,"line_start":189,"line_end":189,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":6620,"byte_end":6641,"line_start":196,"line_end":196,"column_start":12,"column_end":33},"name":"read_protection_alert","qualname":"<MAX17320<I2C>>::read_protection_alert","value":"pub fn read_protection_alert(&mut Self) -> Result<u16, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Read history of previous fault status of the protection functionality\n","sig":null,"attributes":[{"value":"/ Read history of previous fault status of the protection functionality","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":6535,"byte_end":6608,"line_start":195,"line_end":195,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":6819,"byte_end":6841,"line_start":202,"line_end":202,"column_start":12,"column_end":34},"name":"clear_protection_alert","qualname":"<MAX17320<I2C>>::clear_protection_alert","value":"pub fn clear_protection_alert(&mut Self) -> Result<(), Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Clear protection alert register\n","sig":null,"attributes":[{"value":"/ Clear protection alert register","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":6772,"byte_end":6807,"line_start":201,"line_end":201,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":7037,"byte_end":7047,"line_start":208,"line_end":208,"column_start":12,"column_end":22},"name":"read_cell1","qualname":"<MAX17320<I2C>>::read_cell1","value":"pub fn read_cell1(&mut Self) -> Result<f32, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Direct cell voltage measurement for Cell1 (in volts)\n","sig":null,"attributes":[{"value":"/ Direct cell voltage measurement for Cell1 (in volts)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":6969,"byte_end":7025,"line_start":207,"line_end":207,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":7263,"byte_end":7273,"line_start":214,"line_end":214,"column_start":12,"column_end":22},"name":"read_cell2","qualname":"<MAX17320<I2C>>::read_cell2","value":"pub fn read_cell2(&mut Self) -> Result<f32, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Direct cell voltage measurement for Cell2 (in volts)\n","sig":null,"attributes":[{"value":"/ Direct cell voltage measurement for Cell2 (in volts)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":7195,"byte_end":7251,"line_start":213,"line_end":213,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":7489,"byte_end":7499,"line_start":220,"line_end":220,"column_start":12,"column_end":22},"name":"read_cell3","qualname":"<MAX17320<I2C>>::read_cell3","value":"pub fn read_cell3(&mut Self) -> Result<f32, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Direct cell voltage measurement for Cell3 (in volts)\n","sig":null,"attributes":[{"value":"/ Direct cell voltage measurement for Cell3 (in volts)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":7421,"byte_end":7477,"line_start":219,"line_end":219,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":7715,"byte_end":7725,"line_start":226,"line_end":226,"column_start":12,"column_end":22},"name":"read_cell4","qualname":"<MAX17320<I2C>>::read_cell4","value":"pub fn read_cell4(&mut Self) -> Result<f32, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Direct cell voltage measurement for Cell4 (in volts)\n","sig":null,"attributes":[{"value":"/ Direct cell voltage measurement for Cell4 (in volts)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":7647,"byte_end":7703,"line_start":225,"line_end":225,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":7950,"byte_end":7959,"line_start":232,"line_end":232,"column_start":12,"column_end":21},"name":"read_batt","qualname":"<MAX17320<I2C>>::read_batt","value":"pub fn read_batt(&mut Self) -> Result<f32, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Read the total pack voltage measured inside the protector (V)\n","sig":null,"attributes":[{"value":"/ Read the total pack voltage measured inside the protector (V)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":7873,"byte_end":7938,"line_start":231,"line_end":231,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":8164,"byte_end":8173,"line_start":238,"line_end":238,"column_start":12,"column_end":21},"name":"read_pckp","qualname":"<MAX17320<I2C>>::read_pckp","value":"pub fn read_pckp(&mut Self) -> Result<f32, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Read the voltage between PACK+ and GND (V)\n","sig":null,"attributes":[{"value":"/ Read the voltage between PACK+ and GND (V)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":8106,"byte_end":8152,"line_start":237,"line_end":237,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":8377,"byte_end":8396,"line_start":244,"line_end":244,"column_start":12,"column_end":31},"name":"read_battery_status","qualname":"<MAX17320<I2C>>::read_battery_status","value":"pub fn read_battery_status(&mut Self) -> Result<u16, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Read permanent battery status information\n","sig":null,"attributes":[{"value":"/ Read permanent battery status information","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":8320,"byte_end":8365,"line_start":243,"line_end":243,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":9046,"byte_end":9062,"line_start":263,"line_end":263,"column_start":12,"column_end":28},"name":"read_pack_config","qualname":"<MAX17320<I2C>>::read_pack_config","value":"pub fn read_pack_config(&mut Self) -> Result<u16, Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Read the pack configuration\n","sig":null,"attributes":[{"value":"/ Read the pack configuration","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":9003,"byte_end":9034,"line_start":262,"line_end":262,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":9775,"byte_end":9790,"line_start":281,"line_end":281,"column_start":12,"column_end":27},"name":"set_pack_config","qualname":"<MAX17320<I2C>>::set_pack_config","value":"pub fn set_pack_config(&mut Self, u8, u8, ThermistorType,\n                       ChargePumpVoltageConfiguration,\n                       AlwaysOnRegulatorConfiguration, BatteryPackUpdate)\n-> Result<(), Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Set the pack configuration according to application schematic.","sig":null,"attributes":[{"value":"/ Set the pack configuration according to application schematic.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":9200,"byte_end":9266,"line_start":268,"line_end":268,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":9271,"byte_end":9274,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ n_cells: number of cells, min 2, max 4.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":9279,"byte_end":9322,"line_start":270,"line_end":270,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":9327,"byte_end":9330,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ n_therms: number of thermistor channels to enable (not including the die thermistor), min 0, max 4.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":9335,"byte_end":9438,"line_start":272,"line_end":272,"column_start":5,"column_end":108}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":9443,"byte_end":9446,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ therm_type: 10kΩ NTC thermistor or 100kΩ NTC thermistor.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":9451,"byte_end":9513,"line_start":274,"line_end":274,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":9518,"byte_end":9521,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ charge_pump_voltage_config: Set according to the desired gate drive.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":9526,"byte_end":9598,"line_start":276,"line_end":276,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":9603,"byte_end":9606,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ always_on_regulator_config: Disabled, Enabled3p4V or Enabled3p4V","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":9611,"byte_end":9679,"line_start":278,"line_end":278,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":9684,"byte_end":9687,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ battery_pack_update: UpdateEvery22p4s or AfterMeasurementsCompleted","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":9692,"byte_end":9763,"line_start":280,"line_end":280,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":11438,"byte_end":11461,"line_start":322,"line_end":322,"column_start":12,"column_end":35},"name":"set_alert_output_enable","qualname":"<MAX17320<I2C>>::set_alert_output_enable","value":"pub fn set_alert_output_enable(&mut Self, bool) -> Result<(), Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Enable Alert on Fuel-Gauge Outputs.","sig":null,"attributes":[{"value":"/ Enable Alert on Fuel-Gauge Outputs.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":10824,"byte_end":10863,"line_start":311,"line_end":311,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":10868,"byte_end":10871,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ Default = disabled","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":10876,"byte_end":10898,"line_start":313,"line_end":313,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":10903,"byte_end":10906,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ When Aen = 1, violation of any of the","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":10911,"byte_end":10952,"line_start":315,"line_end":315,"column_start":5,"column_end":46}},{"value":"/ alert threshold register values by temperature, voltage, or SOC triggers","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":10957,"byte_end":11033,"line_start":316,"line_end":316,"column_start":5,"column_end":81}},{"value":"/ an alert. This bit affects the ALRT pin operation only. The Smx, Smn, Tmx,","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":11038,"byte_end":11116,"line_start":317,"line_end":317,"column_start":5,"column_end":83}},{"value":"/ Tmn, Vmx, Vmn, Imx, and Imn bits of the Status register (000h) are not","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":11121,"byte_end":11195,"line_start":318,"line_end":318,"column_start":5,"column_end":79}},{"value":"/ disabled. Note that if this bit is set to 1, the ALSH bit will be set to","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":11200,"byte_end":11276,"line_start":319,"line_end":319,"column_start":5,"column_end":81}},{"value":"/ 0 to prevent an alert condition from causing the device to enter shutdown mode.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":11281,"byte_end":11364,"line_start":320,"line_end":320,"column_start":5,"column_end":88}},{"value":"/ If this bit is set to 0, the ALSH bit is not changed.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":11369,"byte_end":11426,"line_start":321,"line_end":321,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":12054,"byte_end":12079,"line_start":337,"line_end":337,"column_start":12,"column_end":37},"name":"set_alert_shutdown_enable","qualname":"<MAX17320<I2C>>::set_alert_shutdown_enable","value":"pub fn set_alert_shutdown_enable(&mut Self, bool) -> Result<(), Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Enable alert shutdown. When ALSH = 1, if the ALRT pin = 1, the device will\n enter shutdown mode. Default = disabled.\n","sig":null,"attributes":[{"value":"/ Enable alert shutdown. When ALSH = 1, if the ALRT pin = 1, the device will","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":11915,"byte_end":11993,"line_start":335,"line_end":335,"column_start":5,"column_end":83}},{"value":"/ enter shutdown mode. Default = disabled.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":11998,"byte_end":12042,"line_start":336,"line_end":336,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":12718,"byte_end":12745,"line_start":352,"line_end":352,"column_start":12,"column_end":39},"name":"set_voltage_alert_threshold","qualname":"<MAX17320<I2C>>::set_voltage_alert_threshold","value":"pub fn set_voltage_alert_threshold(&mut Self, f32, f32)\n-> Result<(), Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Set the upper and lower limits that generate an ALRT pin interrupt if exceeded\n by any of the cell voltage readings.","sig":null,"attributes":[{"value":"/ Set the upper and lower limits that generate an ALRT pin interrupt if exceeded","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":12446,"byte_end":12528,"line_start":347,"line_end":347,"column_start":5,"column_end":87}},{"value":"/ by any of the cell voltage readings.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":12533,"byte_end":12573,"line_start":348,"line_end":348,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":12578,"byte_end":12581,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ For each value, min = 0.0V, max = 5.1V; value must be multiple of 0.02V","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":12586,"byte_end":12661,"line_start":350,"line_end":350,"column_start":5,"column_end":80}},{"value":"/ Defaults: min_v = 0.0V, max_v = 5.1V","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":12666,"byte_end":12706,"line_start":351,"line_end":351,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":13458,"byte_end":13487,"line_start":369,"line_end":369,"column_start":12,"column_end":41},"name":"read_volatage_alert_threshold","qualname":"<MAX17320<I2C>>::read_volatage_alert_threshold","value":"pub fn read_volatage_alert_threshold(&mut Self)\n-> Result<(f32, f32), Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Read the voltage alert threshold, returns tuple of (min_v, max_v)\n","sig":null,"attributes":[{"value":"/ Read the voltage alert threshold, returns tuple of (min_v, max_v)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":13377,"byte_end":13446,"line_start":368,"line_end":368,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":14039,"byte_end":14070,"line_start":383,"line_end":383,"column_start":12,"column_end":43},"name":"set_temperature_alert_threshold","qualname":"<MAX17320<I2C>>::set_temperature_alert_threshold","value":"pub fn set_temperature_alert_threshold(&mut Self, i8, i8)\n-> Result<(), Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Set the upper and lower limits that generate an ALRT pin interrupt if exceeded\n by any thermistor reading.","sig":null,"attributes":[{"value":"/ Set the upper and lower limits that generate an ALRT pin interrupt if exceeded","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":13789,"byte_end":13871,"line_start":378,"line_end":378,"column_start":5,"column_end":87}},{"value":"/ by any thermistor reading.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":13876,"byte_end":13906,"line_start":379,"line_end":379,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":13911,"byte_end":13914,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ For each value, min = -128°C, max = 127°C","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":13919,"byte_end":13966,"line_start":381,"line_end":381,"column_start":5,"column_end":50}},{"value":"/ Defaults: min_t = -128°C, max_t = 127°C (disabled)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":13971,"byte_end":14027,"line_start":382,"line_end":382,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":14467,"byte_end":14499,"line_start":395,"line_end":395,"column_start":12,"column_end":44},"name":"read_temperature_alert_threshold","qualname":"<MAX17320<I2C>>::read_temperature_alert_threshold","value":"pub fn read_temperature_alert_threshold(&mut Self)\n-> Result<(i8, i8), Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Read the temperature alert threshold, returns tuple of (min_t, max_t)\n","sig":null,"attributes":[{"value":"/ Read the temperature alert threshold, returns tuple of (min_t, max_t)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":14382,"byte_end":14455,"line_start":394,"line_end":394,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":15076,"byte_end":15111,"line_start":410,"line_end":410,"column_start":12,"column_end":47},"name":"set_state_of_charge_alert_threshold","qualname":"<MAX17320<I2C>>::set_state_of_charge_alert_threshold","value":"pub fn set_state_of_charge_alert_threshold(&mut Self, u8, u8)\n-> Result<(), Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Set the upper and lower limits that generate an ALRT pin interrupt if exceeded\n by the selected RepSOC, AvSOC, MixSOC, or VFSOC register values.\n See the MiscCFG.SACFG setting for details.","sig":null,"attributes":[{"value":"/ Set the upper and lower limits that generate an ALRT pin interrupt if exceeded","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":14747,"byte_end":14829,"line_start":404,"line_end":404,"column_start":5,"column_end":87}},{"value":"/ by the selected RepSOC, AvSOC, MixSOC, or VFSOC register values.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":14834,"byte_end":14902,"line_start":405,"line_end":405,"column_start":5,"column_end":73}},{"value":"/ See the MiscCFG.SACFG setting for details.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":14907,"byte_end":14953,"line_start":406,"line_end":406,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":14958,"byte_end":14961,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ For each value, min = 0%, max = 255%","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":14966,"byte_end":15006,"line_start":408,"line_end":408,"column_start":5,"column_end":45}},{"value":"/ Defaults: min_soc = 0%, max_soc = 255% (disabled)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":15011,"byte_end":15064,"line_start":409,"line_end":409,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":15512,"byte_end":15548,"line_start":422,"line_end":422,"column_start":12,"column_end":48},"name":"read_state_of_charge_alert_threshold","qualname":"<MAX17320<I2C>>::read_state_of_charge_alert_threshold","value":"pub fn read_state_of_charge_alert_threshold(&mut Self)\n-> Result<(u8, u8), Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Read the state of charge alert threshold, returns tuple of (min_soc, max_soc)\n","sig":null,"attributes":[{"value":"/ Read the state of charge alert threshold, returns tuple of (min_soc, max_soc)","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":15419,"byte_end":15500,"line_start":421,"line_end":421,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":16054,"byte_end":16081,"line_start":436,"line_end":436,"column_start":12,"column_end":39},"name":"set_current_alert_threshold","qualname":"<MAX17320<I2C>>::set_current_alert_threshold","value":"pub fn set_current_alert_threshold(&mut Self, i8, i8) -> Result<(), Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Set the upper and lower limits that generate an ALRT pin interrupt if exceeded\n by any of the current register value.","sig":null,"attributes":[{"value":"/ Set the upper and lower limits that generate an ALRT pin interrupt if exceeded","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":15796,"byte_end":15878,"line_start":431,"line_end":431,"column_start":5,"column_end":87}},{"value":"/ by any of the current register value.","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":15883,"byte_end":15924,"line_start":432,"line_end":432,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":15929,"byte_end":15932,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ For each value, min = -128, max = 127; in units of 400μV","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":15937,"byte_end":15998,"line_start":434,"line_end":434,"column_start":5,"column_end":65}},{"value":"/ Defaults: min_i = -128, max_i = 127","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":16003,"byte_end":16042,"line_start":435,"line_end":435,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":16462,"byte_end":16490,"line_start":444,"line_end":444,"column_start":12,"column_end":40},"name":"read_current_alert_threshold","qualname":"<MAX17320<I2C>>::read_current_alert_threshold","value":"pub fn read_current_alert_threshold(&mut Self) -> Result<(i8, i8), Error<E>>","parent":null,"children":[],"decl_id":null,"docs":" Read the current alert threshold, returns tuple of (min_i, max_i) in units of 400μV\n","sig":null,"attributes":[{"value":"/ Read the current alert threshold, returns tuple of (min_i, max_i) in units of 400μV","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":16362,"byte_end":16450,"line_start":443,"line_end":443,"column_start":5,"column_end":92}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/error.rs","byte_start":19641,"byte_end":19646,"line_start":18,"line_end":18,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":11}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/i2c_interface.rs","byte_start":19811,"byte_end":19819,"line_start":6,"line_end":6,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":3492,"byte_end":3500,"line_start":104,"line_end":104,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/error.rs","byte_start":19641,"byte_end":19646,"line_start":18,"line_end":18,"column_start":21,"column_end":26},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":412},"to":{"krate":1,"index":2895}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/i2c_interface.rs","byte_start":19811,"byte_end":19819,"line_start":6,"line_end":6,"column_start":14,"column_end":22},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":472},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dpop/.cargo/registry/src/github.com-1ecc6299db9ec823/max17320-0.1.0/src/lib.rs","byte_start":3492,"byte_end":3500,"line_start":104,"line_end":104,"column_start":14,"column_end":22},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":472},"to":{"krate":4294967295,"index":4294967295}}]}